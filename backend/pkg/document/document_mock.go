// Code generated by MockGen. DO NOT EDIT.
// Source: document.go

// Package document is a generated GoMock package.
package document

import (
	context "gritter/pkg/context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	bson "go.mongodb.org/mongo-driver/bson"
)

// MockDocument is a mock of Document interface.
type MockDocument struct {
	ctrl     *gomock.Controller
	recorder *MockDocumentMockRecorder
}

// MockDocumentMockRecorder is the mock recorder for MockDocument.
type MockDocumentMockRecorder struct {
	mock *MockDocument
}

// NewMockDocument creates a new mock instance.
func NewMockDocument(ctrl *gomock.Controller) *MockDocument {
	mock := &MockDocument{ctrl: ctrl}
	mock.recorder = &MockDocumentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDocument) EXPECT() *MockDocumentMockRecorder {
	return m.recorder
}

// CreateOne mocks base method.
func (m *MockDocument) CreateOne(ctx context.Context, name Name, doc interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOne", ctx, name, doc)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOne indicates an expected call of CreateOne.
func (mr *MockDocumentMockRecorder) CreateOne(ctx, name, doc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOne", reflect.TypeOf((*MockDocument)(nil).CreateOne), ctx, name, doc)
}

// DeleteOne mocks base method.
func (m *MockDocument) DeleteOne(ctx context.Context, name Name, query bson.M) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOne", ctx, name, query)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOne indicates an expected call of DeleteOne.
func (mr *MockDocumentMockRecorder) DeleteOne(ctx, name, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOne", reflect.TypeOf((*MockDocument)(nil).DeleteOne), ctx, name, query)
}

// GetOne mocks base method.
func (m *MockDocument) GetOne(ctx context.Context, name Name, query bson.M, doc interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOne", ctx, name, query, doc)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetOne indicates an expected call of GetOne.
func (mr *MockDocumentMockRecorder) GetOne(ctx, name, query, doc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockDocument)(nil).GetOne), ctx, name, query, doc)
}

// UpdateOne mocks base method.
func (m *MockDocument) UpdateOne(ctx context.Context, name Name, query bson.M, doc interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOne", ctx, name, query, doc)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOne indicates an expected call of UpdateOne.
func (mr *MockDocumentMockRecorder) UpdateOne(ctx, name, query, doc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOne", reflect.TypeOf((*MockDocument)(nil).UpdateOne), ctx, name, query, doc)
}
